import{V as t,S as e,P as s,M as i,C as n,a as o,B as a,b as h,c as r,F as c,d,W as l,R as m,e as u,f as p,E as w,g,h as f,i as v,D as z,j as y,k,l as x,m as C}from"./vendor.js";const A=`${Date.now()}`;class M{constructor(t=50){this.chunksize=t,this.chunks=new Set}addChunk(t){this.chunks.add(t)}createChunk(t){const e=t.multiplyScalar(this.chunksize),s=new S(this.chunksize,e);this.addChunk(s)}addTo(t){for(const e of this.chunks)e.mesh.position.z=e.offset.z,t.add(e.mesh)}update(e){for(const s of this.chunks)if(s.update(e),s.mesh.position.z>this.chunksize){const e=2*this.chunksize;s.updateOffset(new t(0,0,-e)),s.mesh.position.z-=e}}}class S{constructor(a=50,h=new t){this.size=a,this.offset=h,this.height=20,this.smoothing=10,this.size=a,this.segments=a/2,this.offset=h,this.simplex=new e(A),this.geometry=new s(this.size,this.size,this.segments,this.segments),this.setGeometryHeight(),this.material=new i({color:new n(788010)}),this.mesh=new o(this.geometry,this.material)}setGeometryHeight(){const e=this.geometry.getAttribute("position").array;for(let s=2;s<e.length;s+=3){const i=e[s-2]+this.offset.x,n=e[s-1];e[s]=-n;const o=e[s]+this.offset.z;e[s-1]=this.simplex.noise2D(i/this.smoothing,o/this.smoothing)*this.getHeight(new t(i,n,o))}this.geometry.setAttribute("position",new a(e,3)),this.geometry.computeVertexNormals()}getHeight(t){return Math.min(.1*Math.abs(t.x),this.height)}addTo(t){t.add(this.mesh)}update(t){this.mesh.position.z=this.mesh.position.z+t}updateOffset(t){this.offset.add(t),this.updateGeometry()}updateGeometry(){const e=this.geometry.getAttribute("position").array;for(let s=2;s<e.length;s+=3){const i=e[s-2]+this.offset.x,n=e[s-1],o=e[s]+this.offset.z;e[s-1]=this.simplex.noise2D(i/this.smoothing,o/this.smoothing)*this.getHeight(new t(i,n,o))}this.geometry.setAttribute("position",new a(e,3)),this.geometry.computeVertexNormals()}}class P{constructor(e){this.pink=12327284,this.skyColor=1771323,this.groundColor=788010,this.FOV=45,this.NEAR=1,this.FAR=350,this.clock=new h,this.scene=new r,this.animationId=null,this.canvas=e;const s=e.clientWidth/e.clientHeight;this.scene.background=new n(this.skyColor),this.scene.fog=new c(this.pink,1,this.FAR/2),this.scene.add(this.createSkydome()),this.scene.add(this.createSunset()),this.createStars().map((t=>this.scene.add(t))),this.camera=new d(this.FOV,s,this.NEAR,this.FAR),this.camera.position.set(0,6,30),this.scene.add(this.camera),this.terrain=new M(this.FAR),this.terrain.createChunk(new t),this.terrain.createChunk(new t(0,0,-1)),this.terrain.addTo(this.scene),this.renderer=new l({antialias:!0,canvas:e}),this.renderer.setPixelRatio(window.devicePixelRatio||1),this.renderer.toneMapping=m,this.renderer.toneMappingExposure=Math.pow(1,4);const i=new u(this.scene,this.camera),o=new p(.2,.75,2048,0);this.composer=new w(this.renderer),this.composer.addPass(i),this.composer.addPass(o)}createSkydome(){const t={topColor:{value:new n(this.skyColor)},bottomColor:{value:new n(this.pink)},offset:{value:-4},exponent:{value:.2}},e=new g(this.FAR/2,32,15),s=new f({uniforms:t,vertexShader:"\n            varying vec3 vWorldPosition;\n    \n            void main() {\n    \n                vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n                vWorldPosition = worldPosition.xyz;\n    \n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    \n            }\n        ",fragmentShader:"\n            uniform vec3 topColor;\n            uniform vec3 bottomColor;\n            uniform float offset;\n            uniform float exponent;\n    \n            varying vec3 vWorldPosition;\n    \n            void main() {\n    \n                float h = normalize(vWorldPosition + offset).y;\n                float w = normalize(vWorldPosition).x;\n                gl_FragColor = vec4(\n                    mix(\n                        bottomColor, \n                        topColor,\n                        max(h / exponent, 0.0)\n                    ),\n                    1.0\n                );\n    \n            }\n        ",side:v});return new o(e,s)}createGround(){const t=new s(this.FAR,this.FAR,100,100),e=new i({color:this.groundColor});e.side=z;const n=new o(t,e);return n.rotateX(Math.PI/2),n}createSunset(t=40){const e=new g(t,t,32),s=new i({color:this.pink}),n=new o(e,s);return n.position.set(0,.35*t,-this.FAR/1.8),n}createStars(){const e=new y,s=[],i=new t;for(let t=0;t<2e3;t++)i.x=2*Math.random()-1,i.y=2*Math.random()-1,i.z=2*Math.random()-1,i.multiplyScalar(3),s.push(i.x,i.y,i.z);e.setAttribute("position",new k(s,3));const n=[5592405,3355443,3815994].reduce(((t,e)=>(t.push(new x({color:e,size:2,sizeAttenuation:!1}),new x({color:e,size:1,sizeAttenuation:!1})),t)),[]),o=n.length,a=[];for(let t=10;t<20;t++){const s=new C(e,n[t%o]);s.rotation.x=2*Math.random(),s.rotation.y=2*Math.random(),s.rotation.z=2*Math.random(),s.scale.setScalar(10*t),s.matrixAutoUpdate=!1,s.updateMatrix(),a.push(s)}return a}resize(t,e){this.camera.aspect=t/e,this.camera.updateProjectionMatrix(),this.renderer.setSize(t,e),this.composer.setSize(t,e)}render(){this.terrain.update(.5),this.composer.render(),this.animationId=requestAnimationFrame((()=>this.render()))}stop(){this.animationId&&cancelAnimationFrame(this.animationId)}}const b=document.createElement("template");b.innerHTML='\n    <style>\n        :host {\n            display: block;\n            height: 100%;\n            width: 100%;\n        }\n        canvas {\n            position: relative;\n            height: 100%;\n            width: 100%;\n        }\n    </style>\n    <canvas id="canvas"></canvas>\n';class F extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"})}connectedCallback(){this.shadow.appendChild(b.content.cloneNode(!0));const t=this.shadow.host,e=this.shadow.getElementById("canvas");this.scene=new P(e),window.addEventListener("resize",(()=>{var e;null==(e=this.scene)||e.resize(t.clientWidth,t.clientHeight)})),this.scene.resize(t.clientWidth,t.clientHeight),this.scene.render()}disconnectedCallback(){var t;null==(t=this.scene)||t.stop(),this.scene=void 0}}customElements.define("retro-scene",F);
